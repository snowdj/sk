<<<<<<< HEAD
as.numeric(dyuima@data@ original.data)
simPr<-cbind(simPr,as.numeric(dyuima@data@ original.data))
}
for(j in 1:length(initPr)){
for(j in 1:length(initPr)){
dyuima <- simulate(yuima, xinit= initPr[j], true.parameter=list(theta1=gbmPara[j,1],theta2=gbmPara[j,2]))
as.numeric(dyuima@data@ original.data)
simPr<-cbind(simPr,as.numeric(dyuima@data@ original.data))
}
for(j in 1:length(initPr)){
dyuima <- simulate(yuima, xinit= initPr[j], true.parameter=list(theta1=gbmPara[j,1],theta2=gbmPara[j,2]))
as.numeric(dyuima@data@ original.data)
simPr<-cbind(simPr,as.numeric(dyuima@data@ original.data))
}
ymodel <- setModel(drift=c("theta2*x"), diffusion=c("theta1*x"),time.variable="t", state.variable="x", solve.variable="x")
n <- 1000
ysamp <- setSampling(Terminal=(n)^(1/2), n=n)
yuima <- setYuima(model=ymodel, sampling=ysamp)
simPr<-matrix(nrow=n+1)
initPr<-price[340,]
for(j in 1:length(initPr)){
dyuima <- simulate(yuima, xinit= initPr[j], true.parameter=list(theta1=gbmPara[j,1],theta2=gbmPara[j,2]))
as.numeric(dyuima@data@ original.data)
simPr<-cbind(simPr,as.numeric(dyuima@data@ original.data))
}
initPr
initPr<-price[340,-1]
initPr
for(j in 1:length(initPr)){
dyuima <- simulate(yuima, xinit= initPr[j], true.parameter=list(theta1=gbmPara[j,1],theta2=gbmPara[j,2]))
as.numeric(dyuima@data@ original.data)
simPr<-cbind(simPr,as.numeric(dyuima@data@ original.data))
}
meanpr<-apply(price[c(265:340),-1], 2, mean)
meanpr
initPr
str(initPr)
initPr[1,]
str(meanpr)
as.numeric(initPr[1,])
for(j in 1:length(initPr)){
dyuima <- simulate(yuima, xinit= as.numeric(initPr[j,]), true.parameter=list(theta1=gbmPara[j,1],theta2=gbmPara[j,2]))
as.numeric(dyuima@data@ original.data)
simPr<-cbind(simPr,as.numeric(dyuima@data@ original.data))
}
meanpr
as.numeric(initPr[1,])
str(as.numeric(initPr[1,]))
str(meanpr)
for(j in 1:length(initPr)){
dyuima <- simulate(yuima, xinit= as.numeric(initPr[j]), true.parameter=list(theta1=gbmPara[j,1],theta2=gbmPara[j,2]))
=======
simPr<-matrix(nrow=n+1)
for(j in 2:length(meanPr)){
dyuima <- simulate(yuima, xinit= meanPr[j], true.parameter=list(theta1=gbmPara[j,1],theta2=gbmPara[j,2]))
as.numeric(dyuima@data@ original.data)
simPr<-cbind(simPr,as.numeric(dyuima@data@ original.data))
}
simPr
simPr<-as.data.frame(simPr)
simPr<-simPr[,complete.cases(simPr)]
simPr
gbmPara<-gbmPara[-1,]
gbmPara
for(i in 2:ncol(price)){
x <- price[,i]
Data2=setYuima(data=setData(x),ymodel)
mle1 <- qmle(Data2, start = list(theta1 = 1, theta2 = -0.001),lower = list(theta1=-2, theta2=-1),upper = list(theta1=0.5, theta2=0.5), method = "L-BFGS-B")
coef(mle1)
gbmPara <- rbind(gbmPara, coef(mle1))
}
gbmPara<-as.data.frame(gbmPara)
gbmPara<-gbmPara[-1,]
gbmPara
gbmPara<- matrix(ncol=2)
# loop for all parameter
for(i in 2:ncol(price)){
x <- price[,i]
Data2=setYuima(data=setData(x),ymodel)
mle1 <- qmle(Data2, start = list(theta1 = 1, theta2 = -0.001),lower = list(theta1=-2, theta2=-1),upper = list(theta1=0.5, theta2=0.5), method = "L-BFGS-B")
coef(mle1)
gbmPara <- rbind(gbmPara, coef(mle1))
}
gbmPara<-as.data.frame(gbmPara)
gbmPara
gbmPara<-gbmPara[-1,]
names(gbmPara)<-c("sigma","mu")
gbmPara
simPr<-matrix(nrow=n+1)
# set loop for 5 crop sim price
for(j in 2:length(meanPr)){
dyuima <- simulate(yuima, xinit= meanPr[j], true.parameter=list(theta1=gbmPara[j,1],theta2=gbmPara[j,2]))
as.numeric(dyuima@data@ original.data)
simPr<-cbind(simPr,as.numeric(dyuima@data@ original.data))
}
simPr
simPr<-as.data.frame(simPr[,-1])
names(gbmPara)<-names(prices)
names(gbmPara)<-names(price)
simPr
simPr<-matrix(nrow=n+1)
# set loop for 5 crop sim price
for(j in 2:length(meanPr)){
dyuima <- simulate(yuima, xinit= meanPr[j], true.parameter=list(theta1=gbmPara[j,1],theta2=gbmPara[j,2]))
as.numeric(dyuima@data@ original.data)
simPr<-cbind(simPr,as.numeric(dyuima@data@ original.data))
}
simPr
simPr<-matrix(nrow=n+1)
# set loop for 5 crop sim price
for(j in 1:length(meanPr)){
dyuima <- simulate(yuima, xinit= meanPr[j], true.parameter=list(theta1=gbmPara[j,1],theta2=gbmPara[j,2]))
as.numeric(dyuima@data@ original.data)
simPr<-cbind(simPr,as.numeric(dyuima@data@ original.data))
}
simPr
simPr<-as.data.frame(simPr[,-1])
names(gbmPara)<-names(price)
simPr
names(gbmPara)<-names(price)
simPr<-as.data.frame(simPr[,-1])
names(gbmPara)<-names(price)[-1]
simPr
simPr<-matrix(nrow=n+1)
# set loop for 5 crop sim price
for(j in 1:length(meanPr)){
dyuima <- simulate(yuima, xinit= meanPr[j], true.parameter=list(theta1=gbmPara[j,1],theta2=gbmPara[j,2]))
as.numeric(dyuima@data@ original.data)
simPr<-cbind(simPr,as.numeric(dyuima@data@ original.data))
}
simPr
simPr<-as.data.frame(simPr[,-1])
names(gbmPara)<-names(price)[-1]
simPr
names(price)[-1]
simPr
head(simPr)
names(simPr)<-names(price)[-1]
head(simPr)
writer.table(gbmPara, "gbmPara")
library(xtable)
writer.table(gbmPara, "gbmPara")
write.table(gbmPara, "gbmPara")
setwd("E:/Dropbox/book/economics/485/projects/nlfarm/data/SK")
write.table(gbmPara, "gbmPara.csv", col.names = TRUE,row.names = FALSE, sep="," )
row.names(gbmPara) <- names(price)
names(price)
names(price)[-1]
row.names(gbmPara) <- names(price)[-1]
write.table(gbmPara, "gbmPara.csv", col.names = TRUE,row.names = FALSE, sep="," )
write.table(gbmPara, "gbmPara.csv", col.names = TRUE,row.names = T, sep="," )
price<- read.csv("price.csv", header = T, sep = ",")
gbmPara<- matrix(ncol=2)
# loop for all parameter
for(i in 2:ncol(price)){
x <- price[,i]
Data2=setYuima(data=setData(x),ymodel)
mle1 <- qmle(Data2, start = list(theta1 = 1, theta2 = -0.001),lower = list(theta1=-2, theta2=-1),upper = list(theta1=0.5, theta2=0.5), method = "L-BFGS-B")
coef(mle1)
gbmPara <- rbind(gbmPara, coef(mle1))
}
gbmPara<-as.data.frame(gbmPara)
gbmPara<-gbmPara[-1,]
names(gbmPara)<-c("sigma","mu")
row.names(gbmPara) <- names(price)[-1]
meanPr<-apply(price[,-1],2,mean)
write.table(gbmPara, "gbmPara.csv", col.names = TRUE,row.names = T, sep="," )
simPr<-matrix(nrow=n+1)
# set loop for 5 crop sim price
for(j in 1:length(meanPr)){
dyuima <- simulate(yuima, xinit= meanPr[j], true.parameter=list(theta1=gbmPara[j,1],theta2=gbmPara[j,2]))
as.numeric(dyuima@data@ original.data)
simPr<-cbind(simPr,as.numeric(dyuima@data@ original.data))
}
head(simPr)
simPr<-as.data.frame(simPr[,-1])
names(simPr)<-names(price)[-1]
head(simPr)
print(xtable(head(simPr), type = "html", include.rownames = F)
print(xtable(head(simPr)), type = "html", include.rownames = F)
print(xtable(head(simPr)), type = "html", include.rownames = FALSE )
write.table(simPr,"simPr.csv", col.names = TRUE,row.names = FALSE, sep=",", )
meanPr<-apply(price[265:340,-1],2,mean)
simPr<-matrix(nrow=n+1)
# set loop for 5 crop sim price
for(j in 1:length(meanPr)){
dyuima <- simulate(yuima, xinit= meanPr[j], true.parameter=list(theta1=gbmPara[j,1],theta2=gbmPara[j,2]))
>>>>>>> d2eb8b8d1eb13e2944dead8cc1352b8c3fd3b586
as.numeric(dyuima@data@ original.data)
simPr<-cbind(simPr,as.numeric(dyuima@data@ original.data))
}
head(simPr)
<<<<<<< HEAD
simPr<-as.data.frame(simPr[-1,-1])
names(simPr)<-names(price)[-1]
table(head(simPr)), type = "html", include.rownames = FALSE )
# set mean of price as initial value
write.table(simPr,"simPr.csv", col.names = TRUE,row.names = FALSE, sep=",", )
```
### Plot of simulative price
```{r}
library(lattice)
#install.packages("reshape","ggplot2")
#boxplot(price[c(300:340),-1])
#library(reshape)
library(ggplot2)
simPrPlot<-ggplot(data=melt(simPr), aes(as.factor(variable), value, fill=factor(variable)))
simPrPlot + geom_boxplot() + guides(fill=guide_legend(title=NULL))+labs(title="Boxplot for Simulative Price", x= "Crop", y="Price")
# line
plot.ts(simPr)
plot.ts(price[,-1])
reset_index(simPr)
head(simPr)
ggplot(simPr, aes(x=1:nrow(simPr))) + geom_line(aes(y = simPr$Wheat, colour = "Wheat")) +  geom_line(aes(y = simPr$Barley, colour = "Barley"))+ geom_line(aes(y = simPr$Oats, colour = "Oats")) + geom_line(aes(y = simPr$Flax, colour = "Flax")) + geom_line(aes(y = simPr$Canola, colour = "Calona"))+ labs(title="Trend of Simulative Price", x= "Date", y="Price")+ theme(legend.title=element_blank())
```
## simulation revenue
```{r}
# clean price matrix
head(simPr)
str(simPr)
head(simYld)
# swap column to match price
simYld<-simYld[,c("Wheat","Oats","Barley","Flax","Canola")]
# define the revenue
simRev<-simPr[1,]*simYld[1,]
# generate revenue
for (i in 2:simnum) {
simRev <- rbind(simRev,(simPr[i,]*simYld[i,]))
}
write.table(simRev,"simRev.csv", col.names = TRUE,row.names = FALSE, sep=",", )
head(simRev)
sim = sapply(1:simnum, function(x) simPr[x,]*simYld[x,])
```
sim
head(sim)
head(sim)
str(sim)
head(simRev)
head(yield)
Sheri price and yield simulation data
========================================================
## read data
```{r}
setwd("E:/Dropbox/book/economics/485/projects/sheri/For simulation")
price<-read.csv("price08.csv",head=T, sep=",")
head(price)
# set the date format
price[, 1] <- as.Date(price[, 1], format = "%d/%m/%Y")
yield <-read.csv("yield.csv",head=T, sep=",")
head(yield)
str(yield)
# define yield as character
yield$Average<-as.character(yield$Average)
yield$municipality<-as.character(yield$municipality)
# delete the commas in yield
yield$Average<-gsub('\\,', '', yield$Average)
yield$municipality<-gsub(' ', '', yield$municipality)
# define yield as numeric
yield$Average<-as.numeric(yield$Average)
yield$municipality<-as.factor(yield$municipality)
# split yield to different regions
Y <- split(yield,yield$municipality)
str(df)
muniNames<-levels(yield$municipality)
levels(yield$municipality)
#Or use lapply with assign to assign each piece to an object all at once
lapply(seq_along(Y), function(x) {
assign(muniNames[x], Y[[x]], envir=.GlobalEnv)
}
)
muniNames
D1 <- FortyMile
str(D1)
head(D1)
levels(D1[,3])
```
## Detrand yield and get varibility (standard deviation) of yield for simulation
```{r ,message =FALSE}
#install.packages("mgcv")
#install.packages("forecast")
#install.packages("plyr", dependencies = TRUE)
library(forecast)
library(mgcv)
source("decomp.r")
sdDetrend <- function(x) sd(decomp(x, F)$remainder)
# get mean of yield
library(plyr)
meanYld <- ddply(yield[,-1], . (municipality, crop), summarize, meanyld = mean(Average))
head(meanYld)
write.table(meanYld,"meanyld.csv", col.names = TRUE,row.names = T, sep=",", )
```
## Get the sd for yield
```{r}
# get  sd of yield
sdYld <- ddply(yield[,-1], ~municipality+ crop, summarize, sdyld = sd(Average))
sdYld[4,3]<-288
write.table(sdYld,"sdyld.csv", col.names = TRUE,row.names = FALSE, sep=",", )
sdYld
```
## Get the detrend sd. do no work now
```r
# get detrend sd of yield
sdYldDe <- ddply(yield[,-1], ~municipality+ crop, summarize, sdyld = sdDetrend(Average))
sdYldDe
sdDtrend(yield$Average[,c(yield$municipality=="Westlock", yield$crop=="Canola")])
df<-yield[yield$crop=="Wheat - Canada Prairie Spring",]
df<-df[df$municipality=="FortyMile",]
df
sd(df$Average)
sdDtrend(df$Average)
aggregate(yield ~ municipality + crop, yield$Average,mean)
sum(is.na(sdYld))
```
##
Simulation
```{r }
# Simulating yields
set.seed(143) #Set the random number seed to allow us to repeat results (must be integer)
# input<-read.csv("NLinput.csv", header = T, sep = ",", row.names = 1)
# print(xtable(input), type = "html", include.rownames = T)
muyld <- as.vector(input$yld)
crops<-4
yieldsim <- array(0, dim=c(iter, crops))
revenuesim <- array(0, dim=c(iter, crops))
for (i in 1:iter) {
yieldsim[i,] <- rnorm(crops, yld*(ydrift), styld)
#gross revenue
}
write.table(prMat,"pricesim.csv", col.names = TRUE,row.names = F, sep=",", )
```
##  Fit ou model for price
## OU
a Brownian motion is usually formulated as
[Kun Ren](http://renkun.me/blog/r/2014/04/05/fit-an-ou-process-with-realized-time-series-data.html)
$$dx_t = \mu\,dt+\sigma\,dW_t$$
which is the continuous case of a random walk. In some cases, it is quite convenient to use this formulation to describe the characteristic of asset prices due to its highly unpredictable behavior.
exhibit such stationary mean-reverting behavior
Ornstein-Uhlenbeck process. It is often used to characterize stationary mean-reverting data-generating process like
$$dx_t = \theta (\mu-x_t)\,dt + \sigma\, dW_t$$
where xt denotes the the value of the portfolio, often called the spread, ?? and ?? are two parameters to capture the magnitude of the mean-reverting force, and ?? is a parameter to capture the diverting volatility.
In R, a package named {sde} provides functions to deal with a wide range of stochasic differential equations including the discrete version of Ornstein-Uhlenbeck process.
{sde} package offers a much more general one. sde.sim is a function to simulate any stochastic differential equation in the form
$$dx_t = \mu(x_t,t)\,dt + \sigma(x_t,t)\, dW_t$$
we simulate a spread process generated by an OU-process formulated by
$$dx_t = (0-0.5x)\,dt + 0.8\, dW_t$$
```{r}
# function for Calibration using Maximum Likelihood estimates
ouFit.ML = function(spread) {
n = length(spread)
delta = 1  # delta
Sx = sum(spread[1:n - 1])
Sy = sum(spread[2:n])
Sxx = sum((spread[1:n - 1])^2)
Syy = sum((spread[2:n])^2)
Sxy = sum((spread[1:n - 1]) * (spread[2:n]))
mu = (Sy * Sxx - Sx * Sxy)/((n - 1) * (Sxx - Sxy) - (Sx^2 - Sx * Sy))
theta = -log((Sxy - mu * Sx - mu * Sy + (n - 1) * mu^2)/(Sxx - 2 * mu * Sx + (n - 1) * mu^2))/delta
a = exp(-theta * delta)
sigmah2 = (Syy - 2 * a * Sxy + a^2 * Sxx - 2 * mu * (1 - a) * (Sy - a * Sx) + (n - 1) * mu^2 * (1 - a)^2)/(n - 1)
sigma = sqrt((sigmah2) * 2 * theta/(1 - a^2))
theta = list(theta = theta, mu = mu, sigma = sigma, sigmah2 = sigmah2)
return(theta)
}
```
### Generate all parameter for all crop price
```{r}
paraPrLi <- apply( price[,-1] ,2,function(x) ouFit.ML(x))
#str(paraMat)
#str(paraMat[1])
paraPrMat <- matrix(unlist(paraLi), ncol = 5, byrow = F )
#output
write.table(paraPrMat,"paraPrMat.csv", col.names = TRUE,row.names = T, sep=",", )
```
### Ou simulatio function
```{r}
# simulation
# Brownian motion
# Example from Dixit and Pindyck, 1994, pp.74-76
# Simple mean-reverting process:% dx = nu (xbar - x) dt + sigma dz
#----------------------------------------------------------------------
# generate a function for simulation
OU.sim <- function(para = c(0.01, 200, 1), x0= 1, periods=100){
#  periods=100; #Number of periods
theta = para[1]; # speed of reversion
mu = para[2];
sigma = para[3]; # sigma in monthly terms
# theta = 1
sigma2 = sigma * sqrt((1-exp(-2*theta))/(2*theta));   # dt=1;
x= as.vector(rep(0, periods))  # all zero, 100 vector
epsilon=rnorm(periods)
x[1]= mu; # Starting value of first row of x
for (i in 2:periods){
x[i] = x[i-1] + mu*(1-exp(-theta)) + x[i-1]*(exp(-theta)-1) + sigma2*epsilon[i-1];
}
return(x)
}
```
### Generate simulation price matrix 1000*5
```{r}
prMat <- matrix(nrow=1000,ncol=5)
for(i in 1:5){
prMat[,i]<-OU.sim(paraMat[1:3,i],x0 = paraMat[2,i],periods=1000)
}
prMat<-data.frame(prMat)
names(prMat)<-names(price)[-1]
head(prMat)
write.table(prMat,"pricesim.csv", col.names = TRUE,row.names = FALSE, sep=",", )
```
## revenue
```{r}
iter<-1000
for (i in 1:iter) {
prSim[i,] <-
yldSim[i,] <-
revSim[i,] <- prSim[i,]*yldSim[i,]         #gross revenue
}
```
head(D1)
meanYld <- ddply(D1[,-1], . (municipality, crop), summarize, meanyld = mean(Average))
sdYld <- ddply(D1[,-1], ~municipality+ crop, summarize, sdyld = sd(Average))
sdYld
sdYld[4,3]<-288
sdYld
write.table(sdYld,"sdyld.csv", col.names = TRUE,row.names = FALSE, sep=",", )
sdYldDe <- ddply(D1[,-1], ~municipality+ crop, summarize, sdyld = sdDetrend(Average))
sdYldDe <- ddply(D1[complete.cases(D1),,-1], ~municipality+ crop, summarize, sdyld = sdDetrend(Average))
sdYldDe <- ddply(D1[complete.cases(D1),-1], ~municipality+ crop, summarize, sdyld = sdDetrend(Average))
D1[complete.cases(D1),-1]
sdYldDe <- ddply(D1[complete.cases(D1),-1], ~ crop, summarize, sdyld = sdDetrend(Average))
write.table(sdYld,"sdyld.csv", col.names = TRUE,row.names = FALSE, sep=",", )
sdYldDe <- apply(D1[,-1],2, function(x) sdDtrend(x))
sdYldDe <- ddply(D1[complete.cases(D1),-1], ~ crop, summarize, sdyldDe = sdDetrend(Average))
tapply(D1[complete.cases(D1),3], D1[complete.cases(D1),2], sum)
D1[complete.cases(D1),3]
tapply(D1[complete.cases(D1),4], D1[complete.cases(D1),4], sum)
tapply(D1[complete.cases(D1),4], D1[complete.cases(D1),4], sdDetrend)
write.table(paraPrMat,"paraPrMat.csv", col.names = TRUE,row.names = T, sep=",", )
paraPrLi <- apply( price[,-1] ,2,function(x) ouFit.ML(x))
paraPrLi
paraPrMat <- matrix(unlist(paraLi), ncol = 5, byrow = F )
paraPrMat <- matrix(unlist(paraPrLi), ncol = 5, byrow = F )
write.table(paraPrMat,"paraPrMat.csv", col.names = TRUE,row.names = T, sep=",", )
sdYldAll <- ddply(yield[,-1], ~municipality+ crop, summarize, sdyld = sd(Average))
sdYldAll
sumYldAll <- ddply(yield[,-1], ~municipality+ crop, summarize, sdyld = sd(Average),meanyld=mean(Average))
sumYldAll
sdYldDe <- ddply(Vulcan[complete.cases(D1),-1], ~ crop, summarize, sdyldDe = sdDetrend(Average))
Vulcan[complete.cases(D1),-1]
D1 <- Vulcan
str(D1)
head(D1)
tapply(D1[complete.cases(D1),4], D1[complete.cases(D1),3], sdDetrend)
names(paraPrMat)<-names(price)[-1]
names(paraPrMat)<-names(price)[-1]
paraPrMat
paraPrMat <- matrix(unlist(paraPrLi), ncol = 5, byrow = F )
dfparaPrMat<-as.data.frame(paraPrMat)
names(dfparaPrMat)<-names(price)[-1]
dfparaPrMat
row.names(dfparaPrMat)<-c("theta", "mu", "sigma", "sigmah2")
dfparaPrMat
apply(price[,-1], 2, sd)
input<- read.csv("../nlinput.csv", header = T, sep = ",")
input<- read.csv("../NLinput.csv", header = T, sep = ",")
input<- read.csv("..\NLinput.csv", header = T, sep = ",")
input<- read.csv("../NLinput.csv", header = T, sep = ",")
input<- read.csv("NLinput.csv", header = T, sep = ",")
setwd("E:/Dropbox/book/economics/485/projects/nlfarm/finalcode")
setwd("E:/Dropbox/book/economics/485/projects/nlfarm/finalcode/slides")
input<- read.csv("../NLinput.csv", header = T, sep = ",")
library(xtable)
input<- read.csv("../NLinput.csv", header = TRUE, sep = ",")
library(xtable)
print(xtable(input), type = "html", include.rownames = FALSE)
## A Representative Farm in SK
head(yield)
require(devtools)
pkgs = c('slidify', 'slidifyLibraries')
install_github(pkgs, 'ramnathv', ref = 'dev'
install_github(pkgs, 'ramnathv', ref = 'dev')
setwd("E:\Dropbox\book\economics\485\projects\nlfarm\data\SK")
setwd("E:\Dropbox\book\economics\485\projects\nlfarm\data\SK\yield.csv")
setwd("E:/Dropbox/book/economics/485/projects/nlfarm/data/SK/yield.csv")
setwd("E:/Dropbox/book/economics/485/projects/nlfarm/data/SK")
yield<-read.csv("yield.csv", skip =2,  header = T, sep = ",")
yield <- yield[-1, c(1:5,7)]
names(yield)[c(4,6)]<-c("Flax","Wheat")
yield<-yiled[,c("date","Wheat","Oats","Barley","Flax","Canola")]
econ <- transform(yield, date = as.character(date))
m1 <- mPlot(x = "date", y = c("psavert", "uempmed"), type = "Line", data = econ)
require(rCharts)
m1 <- mPlot(x = "date", y = c("psavert", "uempmed"), type = "Line", data = econ)
m1$set(pointSize = 0, lineWidth = 1)
m1$save('fig/m1.html', cdn = TRUE)
m1$save('figure/m1.html', cdn = TRUE)
cat('<iframe src="fig/m1.html" width=100%, height=600></iframe>')
m1 <- mPlot(x = "date", y = c("Wheat","Oats","Barley","Flax","Canola"), type = "Line", data = econ)
m1$set(pointSize = 0, lineWidth = 1)
m1$save('figure/m1.html', cdn = TRUE)
cat('<iframe src="fig/m1.html" width=100%, height=600></iframe>')
m1$set(pointSize = 1, lineWidth = 2)
m1$save('figure/m1.html', cdn = TRUE)
cat('<iframe src="fig/m1.html" width=100%, height=600></iframe>')
yld <- transform(yield, date = as.character(date))
m1 <- mPlot(x = "date", y = c("Wheat","Oats","Barley","Flax","Canola"), type = "Line", data = yld)
m1$set(pointSize = 1, lineWidth = 2)
m1$save('figure/m1.html', cdn = TRUE)
cat('<iframe src="fig/m1.html" width=100%, height=600></iframe>')
setwd("E:/Dropbox/book/economics/485/projects/nlfarm/finalcode/slides")
m1$save('assets/img/m1.html', cdn = TRUE)
yield<-read.csv("../yield.csv", skip =2,  header = T, sep = ",")
yield <- yield[-1, c(1:5,7)]
names(yield)[c(4,6)]<-c("Flax","Wheat")
yield<-yiled[,c("date","Wheat","Oats","Barley","Flax","Canola")]
yield<-yield[,c("date","Wheat","Oats","Barley","Flax","Canola")]
yld <- transform(yield, date = as.character(date))
m1 <- mPlot(x = "date", y = c("Wheat","Oats","Barley","Flax","Canola"), type = "Line", data = yld)
m1$set(pointSize = 1, lineWidth = 2)
m1$save('assets/img/m1.html', cdn = TRUE)
cat('<iframe src="assets/img/m1.html" width=100%, height=600></iframe>')
meanyld <- apply(yield[19:23,-1],2, mean)
meanyld
print(xtable(meanyld), type = "html", include.rownames = FALSE)
yield<-yield[,c("date","Wheat","Oats","Barley","Flax","Canola")]
print(xtable(summary(yield)), type = "html", include.rownames = FALSE)
meanyld <- as.data.frame(meanyld)
print(xtable(meanyld), type = "html", include.rownames = FALSE)
meanyld
meanyld <- T(as.data.frame(meanyld))
meanyld <- t(as.data.frame(meanyld))
meanyld
print(xtable(meanyld), type = "html", include.rownames = FALSE)
print(xtable(meanyld), type = "html", include.rownames = T)
meanyld <- apply(yield[19:23,-1],2, mean)
meanyld <- t(as.data.frame(meanyld))
meanyld <- apply(yield[19:23,-1],2, mean)
meanyld <- t(as.data.frame(meanyld))
meanyld
print(xtable(meanyld), type = "html", include.rownames = T)
price<- read.csv("../price.csv", header = T, sep = ",")
price[, 1] <- as.Date(price[, 1], format = "%d/%m/%Y")
meanpr<- apply(price[265:340,-1],2, mean)
# set the date format
price[, 1] <- as.Date(price[, 1], format = "%d/%m/%Y")
meanpr<- apply(price[265:340,-1],2, mean)
meanprice <- t(as.data.frame(meanpr)
meanprice <- t(as.data.frame(meanpr))
print(xtable(meanprice), type = "html", include.rownames = T)
meanprice<- apply(price[265:340,-1],2, mean)
meanprice <- t(as.data.frame(meanprice))
print(xtable(meanprice), type = "html", include.rownames = T)
meanyield <- apply(yield[19:23,-1],2, mean)
meanyield <- t(as.data.frame(meanyield))
print(xtable(meanyield), type = "html", include.rownames = T)
pr <- transform(price, date = as.character(date))
m2 <- mPlot(x = "date", y = c("Wheat","Oats","Barley","Flax","Canola"), type = "Line", data = pr)
m2$set(pointSize = 1, lineWidth = 2)
m2$save('assets/img/m2.html', cdn = TRUE)
cat('<iframe src="assets/img/m2.html" width=100%, height=600></iframe>')
library(forecast)
source("decomp.r")
source("decomp.r")
str(yield)
sdDtrend <- function(x) sd(decomp(x, FALSE)$remainder)
sdyld <- apply(yield[,-1],2, function(x) sdDtrend(x))
meanyld <- apply(yield[19:23,-1],2, mean)
decomp(yield[,2], FALSE)
decomyld<-decomp(yield[,2], FALSE)
plot(decomyld)
plot(1:23,decomyld$trend)
plot(1:23,decomyld$remainder)
plot(1:23,decomyld$trend, type = l)
plot(1:23,decomyld$trend, type = "l"")
plot(1:23,decomyld$trend, type = "l")
plot(1:23,decomyld$trend, type = l)
plot(1:23,decomyld$trend, type=l)
plot(1:23,decomyld$trend, l)
plot(1:23,decomyld$trend, type=l)
plot(1:23,decomyld$trend, type=p)
plot(1:23,decomyld$trend, type="o")
plot(1:23,decomyld$trend, type="l")
plot(1:23,decomyld$trend, type="o")
plot(decomyld$trend, type="o")
plot(1991:2013,decomyld$trend, type="o")
plot(1991:2013,decomyld$remainder, type="o" )
par(mfrow=c(1,2))
decomwhat<-decomp(yield[,2], FALSE)
par(mfrow=c(1,2))
plot(1991:2013,decomwheat$trend, type="o")
library(forecast)
source("decomp.r")
decomwhat<-decomp(yield[,2], FALSE)
plot(1991:2013,decomwheat$trend, type="o")
decomwheat<-decomp(yield[,2], FALSE)
plot(1991:2013,decomwheat$trend, type="o")
plot(1991:2013,decomwheat$remainder, type="o" )
plot(1991:2013,decomwheat$trend, type="o", main="Time trend of Wheat yield")
plot(1991:2013,decomwheat$remainder, type="o", main="Residual of Wheat yield")
sdDtrend <- function(x) sd(decomp(x, FALSE)$remainder)
library(ggplot2)
simnum=1000
crops=5
simYld <- array(0, dim=c(simnum, crops))
for (i in 1:simnum) {
simYld[i,] <- rnorm(crops, meanyld, sdyld)
}
simYld<-as.data.frame(simYld)
names(simYld)<-names(yield)[-1]
head(simYld)
ggplot(simYld, aes(x=1:nrow(simYld))) + geom_line(aes(y = simYld$Wheat, colour = "Wheat")) +  geom_line(aes(y = simYld$Barley, colour = "Barley"))+ geom_line(aes(y = simYld$Oats, colour = "Oats")) + geom_line(aes(y = simYld$Flax, colour = "Flax")) + geom_line(aes(y = simYld$Canola, colour = "Calona"))+ labs(title="Trend of Simulative Price", x= "Date", y="Price")+ theme(legend.title=element_blank())
print(xtable(Detrendsd), type = "html", include.rownames = T)
Detrendsd <- t(as.data.frame(Detrendsd))
Detrendsd <- sdyld
Detrendsd <- t(as.data.frame(Detrendsd))
print(xtable(Detrendsd), type = "html", include.rownames = T)
ggplot(simYld, aes(x=1:nrow(simYld))) + geom_line(aes(y = simYld$Wheat, colour = "Wheat")) +  geom_line(aes(y = simYld$Barley, colour = "Barley"))+ geom_line(aes(y = simYld$Oats, colour = "Oats")) + geom_line(aes(y = simYld$Flax, colour = "Flax")) + geom_line(aes(y = simYld$Canola, colour = "Calona"))+ labs(title="Trend of Simulative Yield, x= "Date", y="Price")+ theme(legend.title=element_blank())
ggplot(simYld, aes(x=1:nrow(simYld))) + geom_line(aes(y = simYld$Wheat, colour = "Wheat")) +  geom_line(aes(y = simYld$Barley, colour = "Barley"))+ geom_line(aes(y = simYld$Oats, colour = "Oats")) + geom_line(aes(y = simYld$Flax, colour = "Flax")) + geom_line(aes(y = simYld$Canola, colour = "Calona")) + labs(title="Trend of Simulative Yield, x= "State", y="Price")+ theme(legend.title=element_blank())
ggplot(simYld, aes(x=1:nrow(simYld))) + geom_line(aes(y = simYld$Wheat, colour = "Wheat")) +  geom_line(aes(y = simYld$Barley, colour = "Barley"))+ geom_line(aes(y = simYld$Oats, colour = "Oats")) + geom_line(aes(y = simYld$Flax, colour = "Flax"))
ggplot(simYld, aes(x=1:nrow(simYld))) + geom_line(aes(y = simYld$Wheat, colour = "Wheat")) +  geom_line(aes(y = simYld$Barley, colour = "Barley"))+ geom_line(aes(y = simYld$Oats, colour = "Oats")) + geom_line(aes(y = simYld$Flax, colour = "Flax")) + geom_line(aes(y = simYld$Canola, colour = "Canola")) + labs(title="Trend of Simulative Yield, x= "State", y="Price")+ theme(legend.title=element_blank())
ggplot(simYld, aes(x=1:nrow(simYld))) + geom_line(aes(y = simYld$Wheat, colour = "Wheat")) +  geom_line(aes(y = simYld$Barley, colour = "Barley"))+ geom_line(aes(y = simYld$Oats, colour = "Oats")) + geom_line(aes(y = simYld$Flax, colour = "Flax")) + geom_line(aes(y = simYld$Canola, colour = "Canola")) + labs(title="Trend of Simulative Yield, x= "State", y="Price")+ theme(legend.title=element_blank())
ggplot(simYld, aes(x=1:nrow(simYld))) + geom_line(aes(y = simYld$Wheat, colour = "Wheat")) +  geom_line(aes(y = simYld$Barley, colour = "Barley"))+ geom_line(aes(y = simYld$Oats, colour = "Oats")) + geom_line(aes(y = simYld$Flax, colour = "Flax"))
head(simYld)
ggplot(simYld, aes(x=1:nrow(simYld))) + geom_line(aes(y = simYld$Wheat, colour = "Wheat")) +  geom_line(aes(y = simYld$Barley, colour = "Barley"))+ geom_line(aes(y = simYld$Oats, colour = "Oats")) + geom_line(aes(y = simYld$Flax, colour = "Flax")) + geom_line(aes(y = simYld$Canola, colour = "Canola")) + labs(title="Trend of Simulative Yield, x= "State", y="Price")+ theme(legend.title=element_blank())
ggplot(simPr, aes(x=1:nrow(simPr))) + geom_line(aes(y = simPr$Wheat, colour = "Wheat")) +  geom_line(aes(y = simPr$Barley, colour = "Barley"))+ geom_line(aes(y = simPr$Oats, colour = "Oats")) + geom_line(aes(y = simPr$Flax, colour = "Flax")) + geom_line(aes(y = simPr$Canola, colour = "Canola"))+ labs(title="Trend of Simulative Price", x= "Date", y="Price")+ theme(legend.title=element_blank())
simYld$Canola
ggplot(simYld, aes(x=1:nrow(simYld))) + geom_line(aes(y = simYld$Wheat, colour = "Wheat")) +  geom_line(aes(y = simYld$Barley, colour = "Barley"))+ geom_line(aes(y = simYld$Oats, colour = "Oats")) + geom_line(aes(y = simYld$Flax, colour = "Flax"))  + labs(title="Trend of Simulative Yield, x= "State", y="Price")+ theme(legend.title=element_blank())
ggplot(simYld, aes(x=1:nrow(simYld))) + geom_line(aes(y = simYld$Wheat, colour = "Wheat")) +  geom_line(aes(y = simYld$Barley, colour = "Barley"))+ geom_line(aes(y = simYld$Oats, colour = "Oats")) + geom_line(aes(y = simYld$Flax, colour = "Flax"))  + geom_line(aes(y = simPr$Canola, colour = "Canola"))+ labs(title="Trend of Simulative Price", x= "Date", y="Price")+ theme(legend.title=element_blank())
ggplot(simYld, aes(x=1:nrow(simYld))) + geom_line(aes(y = simYld$Wheat, colour = "Wheat")) +  geom_line(aes(y = simYld$Barley, colour = "Barley"))+ geom_line(aes(y = simYld$Oats, colour = "Oats")) + geom_line(aes(y = simYld$Flax, colour = "Flax"))  + geom_line(aes(y = simYld$Canola, colour = "Canola"))+ labs(title="Trend of Simulative Price", x= "Date", y="Price")+ theme(legend.title=element_blank())
ggplot(simYld, aes(x=1:nrow(simYld))) + geom_line(aes(y = simYld$Wheat, colour = "Wheat")) +  geom_line(aes(y = simYld$Barley, colour = "Barley"))+ geom_line(aes(y = simYld$Oats, colour = "Oats")) + geom_line(aes(y = simYld$Flax, colour = "Flax"))  + geom_line(aes(y = simYld$Canola, colour = "Canola"))+ labs(title="imulative Yield, x= "Date", y="Price")+ theme(legend.title=element_blank())
ggplot(simYld, aes(x=1:nrow(simYld))) + geom_line(aes(y = simYld$Wheat, colour = "Wheat")) +  geom_line(aes(y = simYld$Barley, colour = "Barley"))+ geom_line(aes(y = simYld$Oats, colour = "Oats")) + geom_line(aes(y = simYld$Flax, colour = "Flax"))  + geom_line(aes(y = simYld$Canola, colour = "Canola"))+ labs(title="Simulative Yield", x= "Date", y="Price") + theme(legend.title=element_blank())
gbmPara<- read.csv("../gbmPara.csv")
print(xtable(gbmPara), type = "html", include.rownames = FALSE)
gbmPara
simPr<-read.csv("../simPr.csv")
simYld<-read.csv("../simYld.csv")
ggplot(simYld, aes(x=1:nrow(simYld))) + geom_line(aes(y = simYld$Wheat, colour = "Wheat")) +  geom_line(aes(y = simYld$Barley, colour = "Barley"))+ geom_line(aes(y = simYld$Oats, colour = "Oats")) + geom_line(aes(y = simYld$Flax, colour = "Flax"))  + geom_line(aes(y = simYld$Canola, colour = "Canola"))+ labs(title="Simulative Yield", x= "State", y="Price") + theme(legend.title=element_blank())
simPr<-read.csv("../simPr.csv")
ggplot(simPr, aes(x=1:nrow(simPr))) + geom_line(aes(y = simPr$Wheat, colour = "Wheat")) +  geom_line(aes(y = simPr$Barley, colour = "Barley"))+ geom_line(aes(y = simPr$Oats, colour = "Oats")) + geom_line(aes(y = simPr$Flax, colour = "Flax")) + geom_line(aes(y = simPr$Canola, colour = "Canola"))+ labs(title="Trend of Simulative Price", x= "Date", y="Price")+ theme(legend.title=element_blank())
ggplot(simPr, aes(x=1:nrow(simPr))) + geom_line(aes(y = simPr$Wheat, colour = "Wheat")) +  geom_line(aes(y = simPr$Barley, colour = "Barley"))+ geom_line(aes(y = simPr$Oats, colour = "Oats")) + geom_line(aes(y = simPr$Flax, colour = "Flax")) + geom_line(aes(y = simPr$Canola, colour = "Canola"))+ labs(title="Simulative Price", x= "State", y="Price")+ theme(legend.title=element_blank())
View(price)
publish(title = 'SK Farm Model', 'index.html', host = 'rpubs')
publish(user = "snowdj", repo = "sk")
setwd("E:/Dropbox/book/economics/485/projects/nlfarm/finalcode/slides")
slidify("index.Rmd")
publish(user = "snowdj", repo = "sk")
publish(user = "snowdj", repo = "sk")
publish(user = "snowdj", repo = "sk")
slidify("index.Rmd")
publish(user = "snowdj", repo = "sk")
publish(user = "snowdj", repo = "sk")
=======
simPr<-as.data.frame(simPr[,-1])
names(simPr)<-names(price)[-1]
write.table(simPr,"simPr.csv", col.names = TRUE,row.names = FALSE, sep=",", )
write.table(simPr,"simPr.csv", col.names = TRUE,row.names = FALSE, sep=",", )
head(simPr)
library(ggplot2)
histpr<-ggplot(data=melt(simPr), aes(as.factor(variable), value, fill=factor(variable)))
histpr + geom_boxplot() + guides(fill=guide_legend(title=NULL))+labs(title="Boxplot for Simulative Price", x= "Crop", y="Price")
simPrPlot<-ggplot(data=melt(simPr), aes(as.factor(variable), value, fill=factor(variable)))
library(reshape)
simPrPlot<-ggplot(data=melt(simPr), aes(as.factor(variable), value, fill=factor(variable)))
simPrPlot + geom_boxplot() + guides(fill=guide_legend(title=NULL))+labs(title="Boxplot for Simulative Price", x= "Crop", y="Price")
head(simPr)
price<- read.csv("price.csv", header = T, sep = ",")
head(price)
ggplot(simPr, aes(simPr)) + geom_line(aes(y = simPr$Wheat, colour = "Wheat")) +  geom_line(aes(y = simPr$Barley, colour = "Barley")) + geom_line(aes(y = simPr$Oats, colour = "Oats")) + geom_line(aes(y = simPr$Flax, colour = "Flax")) + geom_line(aes(y = simPr$Calona, colour = "Calona")) + labs(title="Trend of History Price", x= "Date", y="Price")+ theme(legend.title=element_blank())
head(simPr)
ggplot(simPr) + geom_line(aes(y = simPr$Wheat, colour = "Wheat")) +  geom_line(aes(y = simPr$Barley, colour = "Barley")) + geom_line(aes(y = simPr$Oats, colour = "Oats")) + geom_line(aes(y = simPr$Flax, colour = "Flax")) + geom_line(aes(y = simPr$Calona, colour = "Calona")) + labs(title="Trend of History Price", x= "Date", y="Price")+ theme(legend.title=element_blank())
ggplot(simPr, aes(time)) + geom_line(aes(y = simPr$Wheat, colour = "Wheat")) +  geom_line(aes(y = simPr$Barley, colour = "Barley")) + geom_line(aes(y = simPr$Oats, colour = "Oats")) + geom_line(aes(y = simPr$Flax, colour = "Flax")) + geom_line(aes(y = simPr$Calona, colour = "Calona")) + labs(title="Trend of History Price", x= "Date", y="Price")+ theme(legend.title=element_blank())
ggplot(simPr, aes(x= 1:nrow(simPr))) + geom_line(aes(y = simPr$Wheat, colour = "Wheat")) +  geom_line(aes(y = simPr$Barley, colour = "Barley")) + geom_line(aes(y = simPr$Oats, colour = "Oats")) + geom_line(aes(y = simPr$Flax, colour = "Flax")) + geom_line(aes(y = simPr$Calona, colour = "Calona")) + labs(title="Trend of History Price", x= "Date", y="Price")+ theme(legend.title=element_blank())
ggplot(simPr, aes(1:nrow(simPr)) + geom_line(aes(y = simPr$Wheat, colour = "Wheat")) +  geom_line(aes(y = simPr$Barley, colour = "Barley")) + geom_line(aes(y = simPr$Oats, colour = "Oats")) + geom_line(aes(y = simPr$Flax, colour = "Flax")) + geom_line(aes(y = simPr$Calona, colour = "Calona")) + labs(title="Trend of History Price", x= "Date", y="Price")+ theme(legend.title=element_blank())
ggplot(simPr, aes(1:nrow(simPr))) + geom_line(aes(y = simPr$Wheat, colour = "Wheat")) +  geom_line(aes(y = simPr$Barley, colour = "Barley")) + geom_line(aes(y = simPr$Oats, colour = "Oats")) + geom_line(aes(y = simPr$Flax, colour = "Flax")) + geom_line(aes(y = simPr$Calona, colour = "Calona")) + labs(title="Trend of History Price", x= "Date", y="Price")+ theme(legend.title=element_blank())
1:nrow(simPr)
ggplot(simPr, aes(x=c(1:nrow(simPr))) + geom_line(aes(y = simPr$Wheat, colour = "Wheat")) +  geom_line(aes(y = simPr$Barley, colour = "Barley")) + geom_line(aes(y = simPr$Oats, colour = "Oats")) + geom_line(aes(y = simPr$Flax, colour = "Flax")) + geom_line(aes(y = simPr$Calona, colour = "Calona")) + labs(title="Trend of History Price", x= "Date", y="Price")+ theme(legend.title=element_blank())
ggplot(simPr, aes(x=c(1:nrow(simPr)))) + geom_line(aes(y = simPr$Wheat, colour = "Wheat")) +  geom_line(aes(y = simPr$Barley, colour = "Barley")) + geom_line(aes(y = simPr$Oats, colour = "Oats")) + geom_line(aes(y = simPr$Flax, colour = "Flax")) + geom_line(aes(y = simPr$Calona, colour = "Calona")) + labs(title="Trend of History Price", x= "Date", y="Price")+ theme(legend.title=element_blank())
simPr$Wheat
ggplot(simPr, aes(x=c(1:nrow(simPr))))
ggplot(simPr, aes(x=c(1:nrow(simPr)))) + geom_line(aes(y = simPr$Wheat, colour = "Wheat"))
plot(simPr)
plot(simPr,1:nrow(simPr))
plot(1:nrow(simPr),simPr)
qplot(1:nrow(simPr),simPr)
qplot(simPr,1:nrow(simPr))
xyplot(simPr,1:nrow(simPr))
library(lattice)
xyplot(simPr,1:nrow(simPr))
plot.ts(simPr)
plot.ts(price)
plot.ts(price[,-1])
library("TTR")
prDecom<-decompose(price)
prDecom<-decompose(price$Wheat)
prDecom<-decompose(simPr)
head(price)
ddf<-t(price)
prDecom<-decompose(ddf)
head(ddf)
price<- read.csv("price.csv", header = T, sep = ",")
price[, 1] <- as.Date(price[, 1], format = "%d/%m/%Y")
prDecom<-decompose(price)
ggplot(simPr, aes(x=simPr.inex)) + geom_line(aes(y = simPr$Wheat, colour = "Wheat"))
reset_index(simPr)
library(ggplot2)
ggplot(simPr, aes(x=1:1001)) + geom_line(aes(y = simPr$Wheat, colour = "Wheat"))
ggplot(simPr, aes(x=1:1001)) + geom_line(aes(y = simPr$Wheat, colour = "Wheat")) +  geom_line(aes(y = simPr$Barley, colour = "Barley")) + geom_line(aes(y = simPr$Oats, colour = "Oats")) + geom_line(aes(y = simPr$Flax, colour = "Flax")) + geom_line(aes(y = simPr$Calona, colour = "Calona")) + labs(title="Trend of Simulative Price", x= "Date", y="Price")+ theme(legend.title=element_blank())
ggplot(simPr, aes(x=1:1001)) + geom_line(aes(y = simPr$Wheat, colour = "Wheat")) +  geom_line(aes(y = simPr$Barley, colour = "Barley"))
ggplot(simPr, aes(x=1:1001)) + geom_line(aes(y = simPr$Wheat, colour = "Wheat")) +  geom_line(aes(y = simPr$Barley, colour = "Barley"))+ geom_line(aes(y = simPr$Oats, colour = "Oats"))
ggplot(simPr, aes(x=1:1001)) + geom_line(aes(y = simPr$Wheat, colour = "Wheat")) +  geom_line(aes(y = simPr$Barley, colour = "Barley"))+ geom_line(aes(y = simPr$Oats, colour = "Oats")) + geom_line(aes(y = simPr$Flax, colour = "Flax"))
ggplot(simPr, aes(x=1:1001)) + geom_line(aes(y = simPr$Wheat, colour = "Wheat")) +  geom_line(aes(y = simPr$Barley, colour = "Barley"))+ geom_line(aes(y = simPr$Oats, colour = "Oats")) + geom_line(aes(y = simPr$Flax, colour = "Flax")) + geom_line(aes(y = simPr$Calona, colour = "Calona"))
head(simPr)
ggplot(simPr, aes(x=1:1001)) + geom_line(aes(y = simPr$Wheat, colour = "Wheat")) +  geom_line(aes(y = simPr$Barley, colour = "Barley"))+ geom_line(aes(y = simPr$Oats, colour = "Oats")) + geom_line(aes(y = simPr$Flax, colour = "Flax")) + geom_line(aes(y = simPr$Canola, colour = "Calona"))
ggplot(simPr, aes(x=1:1001)) + geom_line(aes(y = simPr$Wheat, colour = "Crop")) +  geom_line(aes(y = simPr$Barley, colour = "Barley"))+ geom_line(aes(y = simPr$Oats, colour = "Oats")) + geom_line(aes(y = simPr$Flax, colour = "Flax")) + geom_line(aes(y = simPr$Canola, colour = "Calona"))
ggplot(simPr, aes(x=1:1001)) + geom_line(aes(y = simPr$Wheat, colour = "Wheat")) +  geom_line(aes(y = simPr$Barley, colour = "Barley"))+ geom_line(aes(y = simPr$Oats, colour = "Oats")) + geom_line(aes(y = simPr$Flax, colour = "Flax")) + geom_line(aes(y = simPr$Canola, colour = "Calona"))
ggplot(simPr, aes(x=1:1001)) + geom_line(aes(y = simPr$Wheat, colour = "Wheat")) +  geom_line(aes(y = simPr$Barley, colour = "Barley"))+ geom_line(aes(y = simPr$Oats, colour = "Oats")) + geom_line(aes(y = simPr$Flax, colour = "Flax")) + geom_line(aes(y = simPr$Canola, colour = "Calona"))+ labs(title="Trend of Simulative Price", x= "Date", y="Price")+ theme(legend.title="Crop")
ggplot(simPr, aes(x=1:1001)) + geom_line(aes(y = simPr$Wheat, colour = "Wheat")) +  geom_line(aes(y = simPr$Barley, colour = "Barley"))+ geom_line(aes(y = simPr$Oats, colour = "Oats")) + geom_line(aes(y = simPr$Flax, colour = "Flax")) + geom_line(aes(y = simPr$Canola, colour = "Calona"))+ labs(title="Trend of Simulative Price", x= "Date", y="Price")+ theme(legend.title=element_blank())
ggplot(simPr, aes(x=1:nrow(simPr))) + geom_line(aes(y = simPr$Wheat, colour = "Wheat")) +  geom_line(aes(y = simPr$Barley, colour = "Barley"))+ geom_line(aes(y = simPr$Oats, colour = "Oats")) + geom_line(aes(y = simPr$Flax, colour = "Flax")) + geom_line(aes(y = simPr$Canola, colour = "Calona"))+ labs(title="Trend of Simulative Price", x= "Date", y="Price")+ theme(legend.title=element_blank())
data(economics, package = "ggplot2")
econ <- transform(economics, date = as.character(date))
m1 <- mPlot(x = "date", y = c("psavert", "uempmed"), type = "Line", data = econ)
m1$set(pointSize = 0, lineWidth = 1)
require(devtools)
install_github('rCharts', 'ramnathv')
library("rCharts", lib.loc="D:/Program Files/R-3.0.3/library")
econ
economics
m1 <- mPlot(x = "date", y = c("psavert", "uempmed"), type = "Line", data = econ)
m1$set(pointSize = 0, lineWidth = 1)
m1$print("chart2")
library(rChart)
library(rCharts)
library(rCharts)
m1 <- mPlot(x = "date", y = c("psavert", "uempmed"), type = "Line", data = econ)
m1 <- mPlot(x = "date", y = c("psavert", "uempmed"), type = "Line", data = econ)
m1$set(pointSize = 0, lineWidth = 1)
m1$print("chart2")
yield<-read.csv("yield.csv", skip =2,  header = T, sep = ",")
head(yield)
yield <- yield[-1, c(1:5,7)]
head(yield)
names(yield)[c(4,6)]<-c("Flax","Wheat")
head(yield)
yield$date<-as.date(yield$date)
yield$date<-as.Date(yield$date)
sdyld <- apply(yield[,-1],2, function(x) sd(decomp(x, F)$remainder))
sdDtrend <- function(x) sd(decomp(x, F)$remainder)
sd(decomp(yield[,2], F)$remainder
sd(decomp(yield[,2], F)$remainder
sd(decomp(yield[,2], F)$remainder)
sdyld0 <- apply(yield[,-1],2, function(x) sd)
sdyld0
head(yield)
histyldb<-ggplot(data=melt(yield[,-1]), aes(as.factor(variable), value, fill=factor(variable)))
histyldb + geom_boxplot() + guides(fill=guide_legend(title=NULL))+labs(title="Boxplot for History Yield", x= "Crop", y="yield")
histyldl <- ggplot(yield, aes(yield[,1]))
yldBarley <- geom_line(aes(y = yield[,2], colour = "Barley"))
yldCanola <- geom_line(aes(y = yield[,3], colour = "Canola"))
yldFlax<- geom_line(aes(y = yield[,4], colour = "Flax"))
yldOats<- geom_line(aes(y = yield[,5], colour = "Oats"))
yldWheat<-geom_line(aes(y = yield[,6], colour = "Wheat"))
histyldl+yldBarley+yldCanola+yldFlax+yldOats+yldWheat
histyldl + yldBarley + yldCanola + yldFlax + yldOats+ yldWheat + labs(title="Trend of History yield", x= "Date", y="yield")+ theme(legend.title=element_blank())
sd(yield[,2])
sd(decomp(yield[,2], F)$remainder)
sdyld0 <- apply(yield[,-1],2, function(x) sd)
sdyld0
sd(yield[,3])
sd(decomp(yield[,3], F)$remainder)
sd(decomp(yield[,3])$remainder)
sd(decomp(yield[,3], FALSE)$remainder)
sdyld0 <- apply(yield[,-1],2, function(x) sd(x))
sdyld0
yield[,1]
yield<-read.csv("yield.csv", skip =2,  header = T, sep = ",")
head(yield)
sdDtrend <- function(x) sd(decomp(x, FALSE)$remainder)
sdyld <- apply(yield[,-1],2, function(x) sdDtrend(x))
sdyld
yield$date<-as.Date(yield$date,format = "%Y")
names(yield)[c(4,6)]<-c("Flax","Wheat")
yield <- yield[-1, c(1:5,7)]
head(yield)
histyldl <- ggplot(yield, aes(yield[,1]))
yldBarley <- geom_line(aes(y = yield[,2], colour = "Barley"))
yldCanola <- geom_line(aes(y = yield[,3], colour = "Canola"))
yldFlax<- geom_line(aes(y = yield[,4], colour = "Flax"))
yldOats<- geom_line(aes(y = yield[,5], colour = "Oats"))
yldWheat<-geom_line(aes(y = yield[,6], colour = "Wheat"))
histyldl + yldBarley + yldCanola + yldFlax + yldOats+ yldWheat + labs(title="Trend of History yield", x= "Date", y="yield")+ theme(legend.title=element_blank())
histyldl + yldBarley + yldCanola + yldFlax + yldOats+ yldWheat + labs(title="Trend of History yield", x= "Date", y="yield")+ theme(legend.title=element_blank())
histyldl + yldBarley + yldCanola + yldFlax + yldOats+ yldWheat + labs(title="Trend of History yield", x= "Date", y="yield")+ theme(legend.title=element_blank())+ scale_x_date(labels = date_format("%d"))
library(ggplot2)
library(scales)
histyldl + yldBarley + yldCanola + yldFlax + yldOats+ yldWheat + labs(title="Trend of History yield", x= "Date", y="yield")+ theme(legend.title=element_blank())+ scale_x_date(labels = date_format("%d"))
histyldl + yldBarley + yldCanola + yldFlax + yldOats+ yldWheat + labs(title="Trend of History yield", x= "Date", y="yield")+ theme(legend.title=element_blank())+ scale_x_date(labels = date_format("%y"))
head(yield)
yield
yield<-read.csv("yield.csv", skip =2,  header = T, sep = ",")
yield <- yield[-1, c(1:5,7)]
names(yield)[c(4,6)]<-c("Flax","Wheat")
yield$date<-as.Date(yield$date)
histyldl <- ggplot(yield, aes(yield[,1]))
yldBarley <- geom_line(aes(y = yield[,2], colour = "Barley"))
yldCanola <- geom_line(aes(y = yield[,3], colour = "Canola"))
yldFlax<- geom_line(aes(y = yield[,4], colour = "Flax"))
yldOats<- geom_line(aes(y = yield[,5], colour = "Oats"))
yldWheat<-geom_line(aes(y = yield[,6], colour = "Wheat"))
histyldl + yldBarley + yldCanola + yldFlax + yldOats+ yldWheat + labs(title="Trend of History yield", x= "Date", y="yield")+ theme(legend.title=element_blank())+ scale_x_date(labels = date_format("%y"))
yield
yield<-read.csv("yield.csv", skip =2,  header = T, sep = ",")
yield
yield<-read.csv("yield.csv", skip =2,  header = T, sep = ",")
yield
yield <- yield[-1, c(1:5,7)]
names(yield)[c(4,6)]<-c("Flax","Wheat")
histyldl <- ggplot(yield, aes(yield[,1]))
yldBarley <- geom_line(aes(y = yield[,2], colour = "Barley"))
yldCanola <- geom_line(aes(y = yield[,3], colour = "Canola"))
yldFlax<- geom_line(aes(y = yield[,4], colour = "Flax"))
yldOats<- geom_line(aes(y = yield[,5], colour = "Oats"))
yldWheat<-geom_line(aes(y = yield[,6], colour = "Wheat"))
histyldl + yldBarley + yldCanola + yldFlax + yldOats+ yldWheat + labs(title="Trend of History yield", x= "Date", y="yield")+ theme(legend.title=element_blank())+ scale_x_date(labels = date_format("%y"))
histyldl + yldBarley + yldCanola + yldFlax + yldOats+ yldWheat + labs(title="Trend of History yield", x= "Date", y="yield")+ theme(legend.title=element_blank())
sdyld0 <- apply(yield[,-1],2, function(x) sd(x))
sdyld <- apply(yield[,-1],2, function(x) sdDtrend(x))
sdyld
str(yield)
meanyld <- apply(yield[19:23,-1],2, mean)
simYld <- array(0, dim=c(iter, crops))
simnum=1000
simYld <- array(0, dim=c(iter, crops))
.Primitive("c")
f
simnum=1000
simYld <- array(0, dim=c(simnum, crops))
crops=5
simYld <- array(0, dim=c(simnum, crops))
meanyld
sdyld
for (i in 1:simnum) {
simYld[i,] <- rnorm(crops, meanyld, styld)
}
for (i in 1:simnum) {
simYld[i,] <- rnorm(crops, meanyld, sdyld)
}
head(simYld)
str(simYld)
names(simYld)<-names(yield)
str(simYld)
write.table(simYld,"simYld.csv", col.names = TRUE,row.names = FALSE, sep=",", )
as.data.frame(simPr)
as.data.frame(siYld)
as.data.frame(simYld)
write.table(as.data.frame(simYld),"simYld.csv", col.names = TRUE,row.names = FALSE, sep=",", )
simYld <- array(0, dim=c(simnum, crops))
for (i in 1:simnum) {
simYld[i,] <- rnorm(crops, meanyld, sdyld)
}
names(simYld)<-names(yield)
as.data.frame(simYld)
head(as.data.frame(simYld))
simYld<-as.data.frame(simYld)
names(simYld)<-names(yield)
names(simYld)<-names(yield)[-1]
head(simYld))
head(simYld)
write.table(simYld,"simYld.csv", col.names = TRUE,row.names = FALSE, sep=",", )
head(simPr)
str(simPr)
simPr <- simPr[-1]
str(simPr)
setwd("E:/Dropbox/book/economics/485/projects/nlfarm/data/SK")
price<- read.csv("price.csv", header = T, sep = ",")
price[, 1] <- as.Date(price[, 1], format = "%d/%m/%Y")
head(price)
head(price)
price[, 1] <- as.Date(price[, 1], format = "%d/%m/%Y")
gbmPara<- matrix(ncol=2)
# loop for all parameter
for(i in 2:ncol(price)){
x <- price[,i]
Data2=setYuima(data=setData(x),ymodel)
mle1 <- qmle(Data2, start = list(theta1 = 1, theta2 = -0.001),lower = list(theta1=-2, theta2=-1),upper = list(theta1=0.5, theta2=0.5), method = "L-BFGS-B")
coef(mle1)
gbmPara <- rbind(gbmPara, coef(mle1))
}
gbmPara<-as.data.frame(gbmPara)
gbmPara<-gbmPara[-1,]
names(gbmPara)<-c("sigma","mu")
row.names(gbmPara) <- names(price)[-1]
# print GBM parameters talbe
print(xtable(gbmPara), type = "html", include.rownames = F)
# set mean of price as initial value
# meanPr<-apply(price[265:340,-1],2,mean)
# print mean of price talbe
print(xtable(meanPr), type = "html", include.rownames = F)
# write to talbe csv
write.table(gbmPara, "gbmPara.csv", col.names = TRUE,row.names = T, sep="," )
simPr<-matrix(nrow=n+1)
# set loop for 5 crop sim price
for(j in 1:length(meanPr)){
dyuima <- simulate(yuima, xinit= meanPr[j], true.parameter=list(theta1=gbmPara[j,1],theta2=gbmPara[j,2]))
as.numeric(dyuima@data@ original.data)
simPr<-cbind(simPr,as.numeric(dyuima@data@ original.data))
}
head(simPr)
head(simPr)
simPr<-as.data.frame(simPr[,-1])
simPr<-as.data.frame(simPr[-1,-1])
simPr<-matrix(nrow=n+1)
# set loop for 5 crop sim price
for(j in 1:length(meanPr)){
dyuima <- simulate(yuima, xinit= meanPr[j], true.parameter=list(theta1=gbmPara[j,1],theta2=gbmPara[j,2]))
as.numeric(dyuima@data@ original.data)
simPr<-cbind(simPr,as.numeric(dyuima@data@ original.data))
}
simPr<-as.data.frame(simPr[-1,-1])
head(simPr)
names(simPr)<-names(price)[-1]
head(simPr)
str(simPr)
head(simYld)
simYld<-simYld(,c("Wheat","Oats","Barley","Flax","Canola"))
simYld<-simYld[,c("Wheat","Oats","Barley","Flax","Canola")]
head(simYld)
simRev <- array(0, dim=c(simnum, crops))
revSim[1] <- simPr[1,]*simYld[1,]
simRev[1] <- simPr[1,]*simYld[1,]
simPr[1,]*simYld[1,]
head(simPr)
str(simRev)
simnum
crops
simRev[1,] <- simPr[1,]*simYld[1,]
simRev <- array(0, dim=c(simnum, crops))
simRev[1,] <- simPr[1,]*simYld[1,]
simRev[1,]
str(simRev)
simRev <- data.frame(0, dim=c(simnum, crops))
str(simRev)
simRev <- data.frame(0, simnum, crops)
str(simRev)
simRev <- array(0, dim=c(simnum, crops))
str(simRev)
simRev[1,] <- simPr[1,]*simYld[1,]
simRev[1,]
simRev[1,] <- simPr[1,]*simYld[1,]
simRev <- array(0, dim=c(simnum, crops))
simRev[1,] <- simPr[1,]*simYld[1,]
str(simRev)
simRev <- data.frame(nrow=simnum, ncol=crops)
str(simRev)
simRev[1,]
simRev <- matrix(nrow=simnum, ncol=crops)
str(simRev)
simRev
simRev[1,] <- simPr[1,]*simYld[1,]
simRev
simRev
head(simRev)
simPr[1,]*simYld[1,]
simRev <- matrix(nrow=simnum, ncol=crops)
head(simRev)
str(simPr[1,]*simYld[1,])
simRev <- matrix(ncol=crops)
head(simRev)
simRev <- rbind(simRev,simPr[i,]*simYld[i,])         #gross revenue
simRev <- rbind(simRev,simPr[1,]*simYld[1,])
simRev <- data.frame(ncol=crops)
simRev[1,]
simRev <- array(0, dim=c(simnum, crops))
str(simRev)
simRev[1,] <- as.vector(simPr[1,]*simYld[1,])
head(simRev)
simRev <- rbind(simRev,as.vector(simPr[i,]*simYld[i,]))
head(simRev)
simRev <- array(0, dim=c(simnum, crops))
simRev <- rbind(simRev,as.vector(simPr[i,]*simYld[i,]))
simRev <- matrix(ncol=crops)
simRev <- rbind(simRev,as.vector(simPr[i,]*simYld[i,]))
names(simRve)
names(simRev)
names(simRev)<-names(simPr)
names(simRev)
simRev <- rbind(simRev,as.vector(simPr[i,]*simYld[i,]))
head(simRev)
simRev[1,] <- as.vector(simPr[1,]*simYld[1,])
simRev[1,]
str(simRev)
simRev[1,] <- as.vector(simPr[1,]*simYld[1,])
simRev <- array(0, dim=c(simnum, crops))
str(simRev)
simRev[1,]
simRev[1,] <- as.vector(simPr[1,]*simYld[1,])
simRev[1,]
simRev <- array(0, dim=c(simnum, crops))
as.array(simPr[1,]*simYld[1,])
(simPr[1,]*simYld[1,])[1]
(simPr[1,]*simYld[1,])[,1]
(simPr[1,]*simYld[,1])
(simPr[1,]*simYld[,1])[1,]
(simPr[1,]*simYld[,1])[[1,]]
(simPr[1,]*simYld[,1])[[1]]
str(simPr[1,]*simYld[1,])
df<-simPr[1,]*simYld[,1])
df<-simPr[1,]*simYld[,1]
df
df<-simPr[1,]*simYld[1,]
df
df<-rbind(df,simPr[1,]*simYld[1,])
df
simRev<-simPr[1,]*simYld[1,]
str(simRev)
for (i in 2:simnum) {
simRev <- rbind(simRev,(simPr[i,]*simYld[i,]))
}
str(simRev)
head(simRev)
write.table(simRev,"simRev.csv", col.names = TRUE,row.names = FALSE, sep=",", )
setwd("E:/Dropbox/book/economics/485/projects/nlfarm/finalcode")
library(slidify)
author.desk(slide)
require(devtools)
author("slides")
>>>>>>> d2eb8b8d1eb13e2944dead8cc1352b8c3fd3b586
